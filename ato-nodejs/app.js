var express   = require('express'),
  app       = express(),
  ibmbluemix   = require('ibmbluemix'),
  ibmdata     = require('ibmdata'),
  config    = {
    // change to real application route assigned for your application
    applicationRoute : "todo-cs.mybluemix.net",
    // change to real application ID generated by Bluemix for your application
    applicationId : "8cefcce7-3134-4612-a953-14053685c9bd",
		applicationSecret: "86f3191cfcb7d386e69774fbb661aaa9951c11a5"
  };
var http = require('http').Server(app);
var io = require('socket.io')(http);
var msgs = [];

// init core sdk
ibmbluemix.initialize(config);
var logger = ibmbluemix.getLogger();

//redirect to cloudcode doc page when accessing the root context
app.get('/', function(req, res){
  res.sendfile('public/index.html');
});

app.get('/watch', function(req, res){
  var button = req.param('b','button');
  var last_msg = msgs.length > 0 ? msgs.pop() : 'no messages';
  io.emit('watch',button);
  io.emit('chat message', 'Pebble sent ' + button);
  res.send('<p>'+last_msg+'</p>');
});



// init service sdks
app.use(function(req, res, next) {
    req.data = ibmdata.initializeService(req);
//    req.ibmpush = ibmpush.initializeService(req);
    req.logger = logger;
    next();
});

io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    io.emit('chat message', msg);
    if(msgs.length < 200){
      msgs.push(msg);
    }
  });
});

// init basics for an express app
app.use(require('./lib/setup'));

//uncomment below code to protect endpoints created afterwards by MAS
//var mas = require('ibmsecurity')();
//app.use(mas);

var ibmconfig = ibmbluemix.getConfig();

logger.info('mbaas context root: '+ibmconfig.getContextRoot());
// "Require" modules and files containing endpoints and apply the routes to our application
app.use(ibmconfig.getContextRoot(), require('./lib/accounts'));
app.use(ibmconfig.getContextRoot(), require('./lib/staticfile'));

app.get('/follow', function(req, res){
  var handle = req.param('h',false);
	var user;
	if(handle){
		handle = handle.indexOf('@') === 0 ? handle : '@'+handle;
		req.data.Query.ofType("Twitter").find({'handle': handle}).done(function(profiles){
    	if(profiles && profiles.length > 0){
				res.send('Twitter profile '+handle+' is already present');
			} else {
				user = req.data.Object.ofType('Twitter', {'handle':handle});
				user.save().then(function(saved) {
					res.json(saved);
				}, function(err){
						res.send(err);
				});
			}
		});

	} else {
		res.send('error saving twitter handle');
	}

});

// Want to see how you can easily extend this template to work with third party node modules?
// If so, add the Twilio service to your Mobile Cloud application and uncomment this next line.
// app.use(ibmconfig.getContextRoot(), require('./lib/mytwilio')(ibmbluemix));

//app.listen(ibmconfig.getPort());

http.listen(ibmconfig.getPort(), function(){
  console.log('App started on port ' + ibmconfig.getPort());
});

logger.info('Server started at port: '+ibmconfig.getPort());
